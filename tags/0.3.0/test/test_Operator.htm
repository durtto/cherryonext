<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>JsUnit Operator Tests</title>
    <link rel="stylesheet" type="text/css" href="jsunit/css/jsUnitStyle.css">
    <link rel="stylesheet" type="text/css" href="../ext/resources/css/ext-all.css" />
    <script type="text/javascript" src="../ext/adapter/ext/ext-base.js"></script>
    <script type="text/javascript" src="../ext/ext-all-debug.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/Operator.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/Field.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/FilterEditor.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/TextValuesEditor.js"></script>
    <script language="JavaScript" type="text/javascript" src="jsunit/app/jsUnitCore.js"></script>
    <script language="JavaScript" type="text/javascript">

      var operator = null;

      function testGetId() {
          assertEquals("The id of the operator is test","TEST", operator.getId());
      }

      function testIsAvailableValuesAvailable() {
        try{
          operator.isAvailableValuesAvailable();
          fail("testIsAvailableValuesAvailable, no exception thrown");
        } catch (e) {
          assertTrue("Exception thrown",true);
        }
      }

      function testGetAvailableValuesThrows() {
        try{
          operator.getAvailableValues();
          fail("testGetAvailableValuesThrows, no exception thrown");
        } catch (e) {
          assertTrue("Exception thrown",true);
        }
      }

      function testGetFieldNull() {
        assertNull(operator.getField());
      }

      function testRender(){
        var value="value";
        try{
          operator.render([value]);
          fail("render without field failed without exception");
        } catch(e){
          assertTrue("Exception thrown",true);
        }
        var field=new Ext.ux.netbox.core.Field("TEST","label");
        field.addOperator(operator);
        assertEquals("The result of operator.render is the same that field.render with an empty value",field.render([],"TEST"),operator.render([]));
        assertEquals("The result of operator.render is the same that field.render with anon empty value",field.render([value],"TEST"),operator.render([value]));
      }

      function testCreateEditor(){
        try{
          operator.createEditor();
          fail("getEditor without field failed without exception");
        } catch(e){
          assertTrue("Exception thrown",true);
        }
        var field=new Ext.ux.netbox.core.Field("TEST","label");
        field.addOperator(operator);
        var text=field.createEditor();
        assertTrue("viene tornato un Ext.ux.netbox.core.TextValuesEditor",text instanceof Ext.ux.netbox.core.TextValuesEditor);
      }

      function testConvertValue(){
        var val=operator.convertValue();
        assertEquals("Passando undefined esce l'array vuoto",0,val.length);
        val=operator.convertValue(null);
        assertEquals("Passando null esce l'array vuoto",0,val.length);
        val=operator.convertValue([]);
        assertEquals("Passando array vuoto esce l'array vuoto",0,val.length);
        val=operator.convertValue([{label: 1, value:2}]);
        assertEquals("Passando 1 array con un elemento, ritorna quell'elemento, label",1,val[0].label);
        assertEquals("Passando 1 array con un elemento, ritorna quell'elemento, value",2,val[0].value);
        val=operator.convertValue([{label: 1}]);
        assertEquals("Passando 1 array con un elemento, ma senza valore",0,val.length);
        val=operator.convertValue([{value: 1}]);
        assertEquals("Passando 1 array con un elemento, ma senza label",0,val.length);
        val=operator.convertValue([{value:1, label:2},{value:3, label: 4}]);
        assertEquals("Passando 1 array con 2 elementi, con label e value nel primo, torna 1 array con 1 elemento",1,val.length);
        assertEquals("Passando 1 array con 2 elementi, con label e value nel primo, torna 1 array con 1 elemento, label",2,val[0].label);
        assertEquals("Passando 1 array con 2 elementi, con label e value nel primo, torna 1 array con 1 elemento, value",1,val[0].value);
      }

      function testIsStoreRemote(){
        try{
          operator.isStoreRemote();
          fail("Operator without field and isStoreRemote doesn't throw any exception");
        } catch (e){
          assertTrue("Exception thrown",true);
        }
        var field=new Ext.ux.netbox.core.Field("TEST","label");
        field.addOperator(operator);
        var store=new Ext.data.SimpleStore({fields: ['value', 'label'],
          data: [
          ["Yes","Si"],
          ["No","No"],
          ["Maybe","Forse"]
        ]});
        field.setAvailableValues(store);
        assertEquals("field isStoreRemote and operator.isSotreRemote retunrs the same value",field.isStoreRemote(),operator.isStoreRemote());
        field.setStoreRemote(false);
        assertEquals("field isStoreRemote and operator.isSotreRemote retunrs the same value",field.isStoreRemote(),operator.isStoreRemote());
      }

      function testIsForceReload(){
        try{
          operator.isForceReload();
          fail("Operator without field and isForceReload doesn't throw any exception");
        } catch (e){
          assertTrue("Exception thrown",true);
        }
        var field=new Ext.ux.netbox.core.Field("TEST","label");
        field.addOperator(operator);
        var store=new Ext.data.SimpleStore({fields: ['value', 'label'],
          data: [
          ["Yes","Si"],
          ["No","No"],
          ["Maybe","Forse"]
        ]});
        field.setAvailableValues(store);
        assertEquals("field isForceReload and operator.isForceReload retunrs the same value",field.isForceReload(),operator.isForceReload());
        field.setForceReload(true);
        assertEquals("field isForceReload and operator.isForceReload retunrs the same value",field.isForceReload(),operator.isForceReload());
      }

      function testIsCaseSensitive(){
        try{
          operator.isCaseSensitive();
          fail("Operator without field and isCaseSensitive doesn't throw any exception");
        } catch (e){
          assertTrue("Exception thrown",true);
        }
        var field=new Ext.ux.netbox.core.Field("TEST","label");
        field.addOperator(operator);
        var store=new Ext.data.SimpleStore({fields: ['value', 'label'],
          data: [
          ["Yes","Si"],
          ["No","No"],
          ["Maybe","Forse"]
        ]});
        field.setAvailableValues(store);
        assertEquals("field isCaseSensitive and operator.isCaseSensitive retunrs the same value",field.isCaseSensitive(),operator.isCaseSensitive());
        field.setCaseSensitive(true);
        assertEquals("field isCaseSensitive and operator.isCaseSensitive retunrs the same value",field.isCaseSensitive(),operator.isCaseSensitive());
      }

      function testGetDefaultValues() {
        var field=new Ext.ux.netbox.core.Field("TEST","label");
        field.addOperator(operator);
        assertArrayEquals("testGetDefaultValues",[],operator.getDefaultValues());
        field.setDefaultValues([{value:"aaa",label:"aaa"}]);
        assertArrayEquals("testGetDefaultValues",[{value:"aaa",label:"aaa"}],field.getDefaultValues());
      }

      function testValidate() {
        try{
          operator.validate();
          fail("validate without field failed without exception");
        } catch(e){
          assertTrue("Exception thrown",true);
        }
        var field=new Ext.ux.netbox.core.Field("TEST","label");
        field.addOperator(operator);
        assertTrue("testValidate",operator.validate([{value:"aaa",label:"aaa"}]));
        var myValidateFunction=function(valuesArray){
          if(valuesArray.length > 0){
            return true;
          } else {
            return(false);
          }
        }
        field.setValidateFn(myValidateFunction);
        var addFn=function(valuesArray){
          return(valuesArray[0].value>0);
        }
        operator.addValidateFn(addFn);
        assertFalse("test validate with additional validator 1",operator.validate([]));
        assertTrue("test validate with additional validator 2",operator.validate([{value:1,label:1}]));
        var newValidateFunction=function(valuesArray){
          if(valuesArray.length > 0){
            return(valuesArray[0].value>1);
          } else {
            return(false);
          }
        }
        operator.setValidateFn(newValidateFunction);
        assertFalse("test validate with specific validation function 1",operator.validate([{value:1,label:1}]));
        assertTrue("test validate with specific validation function 2",operator.validate([{value:2,label:2}]));
      }

      function setUp() {
        operator=new Ext.ux.netbox.core.Operator("TEST");
      }

      function tearDown(){
        delete operator;
        operator=null;
      }
    </script>
</head>

<body>
<h1>JsUnit Operator Tests</h1>

<p>This page contains tests for the JsUnit Framework. To see them, take a look at the source.</p>
</body>
</html>
