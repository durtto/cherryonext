<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>JsUnit ElementaryFilter Tests</title>
    <link rel="stylesheet" type="text/css" href="jsunit/css/jsUnitStyle.css">
    <link rel="stylesheet" type="text/css" href="../ext/resources/css/ext-all.css" />
    <script type="text/javascript" src="../ext/adapter/ext/ext-base.js"></script>
    <script type="text/javascript" src="../ext/ext-all-debug.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/Operator.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/Field.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/Filter.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/ElementaryFilter.js"></script>
    <script language="JavaScript" type="text/javascript" src="jsunit/app/jsUnitCore.js"></script>
    <script language="JavaScript" type="text/javascript">

    var field;
    var operator;
    var elementaryfilter;
    var savedOperator;
    var savedElementaryFilter;
    var controlString;
    
    function onOperatorChanged(elementaryfilter,operator){
      debug("Operator: "+operator);
      savedOperator=operator;
      savedElementaryFilter=elementaryfilter;
    }

    function onValueChanged(elementaryfilter,val){
      if(Ext.type(val)=="array"){
        controlString=val.join(",");
      }else{
        controlString=val;
      }
    }

    function testGetField(){
      assertEquals("testGetField",field,elementaryfilter.getField());
    }

    function testGetOperator(){
      assertEquals("testGetOperator",operator,elementaryfilter.getOperator());
    }
    
    function testSetOperator(){
      elementaryfilter.on("operatorChanged",onOperatorChanged);
      newOperator=new Ext.ux.netbox.core.Operator("newOperator");
      try{
        elementaryfilter.setOperator(newOperator);
        fail("testSetOperator failed without exception");
      } catch (e){
        assertTrue("testSetOperator: Exception thrown",true);
      }
      field.addOperator(newOperator);
      elementaryfilter.setOperator(newOperator);
      assertEquals("evento operatorChanged chiamato con la giusta operazione",savedOperator,newOperator);
      assertEquals("evento operatorChanged chiamato sul giusto filtro",savedElementaryFilter,elementaryfilter);
      assertEquals("testSetOperator: operator is the right one",newOperator,elementaryfilter.getOperator());
      elementaryfilter.setValues([{label: "ciccio", value1: "bombo"}]);
      elementaryfilter.setOperator(operator);
      assertEquals("Operazione convertita",0,elementaryfilter.getValues().length);
    }

    function testGetValues(){
      elementaryfilter.setValues(["test"]);
      assertEquals("testGetValues","test",elementaryfilter.getValues()[0]);
    }


    function testSetValues(){
      elementaryfilter.on("valueChanged",onValueChanged);
      var val=["test1","test2"];
      elementaryfilter.setValues(val);
      assertEquals("testSetValues","test1,test2",controlString);
      assertEquals("testSetValues lunghezza ok",val.length,elementaryfilter.getValues().length);
      controlString="ciccio";
      elementaryfilter.setValues(val);
      assertEquals("Evento non lanciato", "ciccio", controlString);
      for(var i=0; i<val.length;i++)
        assertEquals("testSetValues valori ok",val[i],elementaryfilter.getValues()[i]);
      try {
        elementaryfilter.setValues();
        fail("testSetValues: setValues with undefined and no exception is thrown");
      } catch(e){
        assertTrue("testSetValues: setValues with undefined and exception thrown",true);
      }
      try {
        elementaryfilter.setValues(null);
        fail("testSetValues: setValues with null and no exception is thrown");
      } catch(e){
        assertTrue("testSetValues: setValues with null and exception thrown",true);
      }
      try {
        elementaryfilter.setValues("test");
        fail("testSetValues: setValues with not an array and no exception is thrown");
      } catch(e){
        assertTrue("testSetValues: setValues with not an array and exception thrown",true);
      }
    }

    function testGetFilterObj(){
      val1="test1";
      val2={value: "test2", label: "label2"};
      values=[val1,val2];
      operator=new Ext.ux.netbox.core.Operator("newOperator");
      field.addOperator(operator);
      field.setDefaultOperator(operator);
      elementaryfilter=new Ext.ux.netbox.core.ElementaryFilter(field);
      elementaryfilter.setValues(values);
      obtained=elementaryfilter.getFilterObj();
      assertEquals("testGetFilterObj, id ok",obtained.fieldId, "field");
      assertEquals("testGetFilterObj, operator ok", obtained.operatorId, "newOperator");
      assertObjectEquals("testGetFilterObj, values ok", obtained.values, values);
    }

    function testSetFilterObj(){
      field1=new Ext.ux.netbox.core.Field("field1");
      var operator1=new Ext.ux.netbox.core.Operator("operator1");
      field1.addOperator(operator1);
      field1.setDefaultOperator(operator1);
      elementaryfilter1=new Ext.ux.netbox.core.ElementaryFilter(field1);
      try{
        elementaryfilter.setFilterObj(elementaryfilter1.getFilterObj());
        fail("testSetFilterObj, no exception thrown");
      } catch (e) {
        assertTrue("testSetFilterObj exception thrown", true);
      }
      elementaryfilter1=new Ext.ux.netbox.core.ElementaryFilter(field);
      operator2=new Ext.ux.netbox.core.Operator("newOperator2");
      field.addOperator(operator2);
      elementaryfilter1.setOperator(operator2);
      val1="test1";
      val2="test2";
      values=[val1,val2];
      elementaryfilter1.setValues(values);
      elementaryfilter.setFilterObj(elementaryfilter1.getFilterObj());
      assertEquals("testSetFilterObj operator ok", operator2, elementaryfilter.getOperator());
      assertEquals("testSetFilterObj values ok", values.join(","), elementaryfilter.getValues().join(","));
    }

    function testGetElementaryFilterById(){
      assertNull("testGetElementaryFilterById null ok", elementaryfilter.getElementaryFilterById("nonEsiste") );
      assertEquals("testGetElementaryFilterById ok", elementaryfilter, elementaryfilter.getElementaryFilterById(elementaryfilter.getId()));
    }

    function testGetElementaryFiltersByFieldId(){
      assertEquals("testGetElementaryFiltersByFieldId empty array", 0, elementaryfilter.getElementaryFiltersByFieldId("nonEsiste").length);
      assertEquals("testGetElementaryFiltersByFieldId ok", elementaryfilter, elementaryfilter.getElementaryFiltersByFieldId("field")[0]);
    }

    function setUp(){
      field=new Ext.ux.netbox.core.Field("field");
      operator=new Ext.ux.netbox.core.Operator("operator1");
      field.addOperator(operator);
      field.setDefaultOperator(operator);
      elementaryfilter=new Ext.ux.netbox.core.ElementaryFilter(field);
    }

    function tearDown(){
      field=null;
      operator=null;
      elementaryfilter=null;
      savedOperator=null;
      savedElementaryFilter=null;
      controlString=null;
    }
    </script>
</head>

<body>
<h1>JsUnit ElementaryFilter Tests</h1>

<p>This page contains tests for the JsUnit Framework. To see them, take a look at the source.</p>
</body>
</html>
