<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>JsUnit FieldManager Tests</title>
    <link rel="stylesheet" type="text/css" href="jsunit/css/jsUnitStyle.css" />
    <link rel="stylesheet" type="text/css" href="../../ext-2.0.1/resources/css/ext-all.css" />
    <script type="text/javascript" src="../../ext-2.0.1/adapter/ext/ext-base.js"></script>
    <script type="text/javascript" src="../../ext-2.0.1/ext-all-debug.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/Operator.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/Field.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/Filter.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/ElementaryFilter.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/CompositeFilter.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/FieldManager.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/FilterModel.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/core/DynamicFilterModelView.js"></script>
    <script language="JavaScript" type="text/javascript" src="../src/netbox/PreferenceManager.js"></script>
    <script language="JavaScript" type="text/javascript" src="jsunit/app/jsUnitCore.js"></script>
    <script language="JavaScript" type="text/javascript" src="jsunit/lib/jsUnitAjax.js"></script>
    <script language="JavaScript" type="text/javascript" src="jsunit/lib/jsUnitMockTimeout.js"></script>
    <script language="JavaScript" type="text/javascript">

    var prefManager;
    var store;
    var mockRequest;
    var result;

    var fieldManager;
    var field;
    var operator;
    var operator15;
    var filterModel;
    var filterObject;
    var filterObject2;
    var compositeFilterObj;

    function provaGetFunc(){
      return compositeFilterObj;
    }

    function provaSetFunc(pref){
      result=pref;
    }

    function onPreferenceSaved(prefName,response){
      result=response;
    }

    function onPreferenceDeleted(prefName,response){
      result=response;
    }

    function testGetAllPreferences(){

      store=prefManager.getAllPreferences();
      store.load({params:{start:0,limit:10}});

      assertEquals("POST", mockRequest.method);
      assertEquals("http://getAllPrefURL", mockRequest.url);
      assertTrue(mockRequest.isAsync);
      assertTrue(mockRequest.sendCalled);
      assertEquals("testGetAllPreferences invio parametri","start=0&limit=10&id=prova&userName=ciccio", mockRequest.data);

      mockRequest.readyState = 4;
      mockRequest.status = 200;
      mockRequest.responseText = "{totalCount: 1, preferences:[{prefId: 'prefId', prefName: 'pippo', prefDesc: 'pluto', isDefault: true}]}";

      Clock.tick(50);
      assertEquals("testGetAllPreferences risultato store", 1, store.getTotalCount());
    }

    function testApplyDefaultPreference(){

      prefManager.applyDefaultPreference();

      assertEquals("POST", mockRequest.method);
      assertEquals("http://applyDefaultPrefURL", mockRequest.url);
      assertTrue(mockRequest.isAsync);
      assertTrue(mockRequest.sendCalled);
      assertEquals("testApplyDefaultPreference invio parametri", "id=prova&userName=ciccio", mockRequest.data);

      mockRequest.readyState = 4;
      mockRequest.status = 200;
      mockRequest.responseText = "{left:filterObject,connector:Ext.ux.netbox.core.CompositeFilter.AND,right:filterObject2}";

      Clock.tick(50);
      assertObjectEquals("testApplyDefaultPreference risultato", compositeFilterObj, result);
      result=-1;
      prefManager.applyDefaultPreference();
      mockRequest.readyState = 4;
      mockRequest.status = 200;
      mockRequest.responseText = "";
      Clock.tick(50);
      assertEquals("testApplyDefaultPreference risultato senza preference di default",-1,result);
    }

    function testApplyPreference(){

      prefManager.applyPreference('prefId');

      assertEquals("POST", mockRequest.method);
      assertEquals("http://loadPrefURL", mockRequest.url);
      assertTrue(mockRequest.isAsync);
      assertTrue(mockRequest.sendCalled);
      assertEquals("testApplyPreference invio parametri", "id=prova&userName=ciccio&prefId=prefId", mockRequest.data);

      mockRequest.readyState = 4;
      mockRequest.status = 200;
      mockRequest.responseText = "{left:filterObject,connector:Ext.ux.netbox.core.CompositeFilter.AND,right:filterObject2}";

      Clock.tick(50);
      assertObjectEquals("testApplyPreference risultato", compositeFilterObj, result);
    }

    function testApplyPreferenceFromPage(){

      prefManager.applyPreference('prefId',compositeFilterObj);

      assertObjectEquals("testApplyPreferenceFromPage risultato", compositeFilterObj, result);
    }

    function testSavePreference(){

      prefManager.on("preferenceSaved",onPreferenceSaved);
      prefManager.savePreference('','pluto','pluto description',true);

      assertEquals("POST", mockRequest.method);
      assertEquals("http://savePrefURL", mockRequest.url);
      assertTrue(mockRequest.isAsync);
      assertTrue(mockRequest.sendCalled);
      assertEquals("testSavePreference invio parametri", "id=prova&userName=ciccio&prefId=&prefName=pluto&prefDesc=pluto%20description&prefValue=%7B%22left%22%3A%7B%22id%22%3A%22field%22%2C%22operator%22%3A%22operator%22%2C%22values%22%3A%5B%7B%22value%22%3A%22test1%22%2C%22label%22%3A%22label1%22%7D%2C%7B%22value%22%3A%22test2%22%2C%22label%22%3A%22label2%22%7D%5D%7D%2C%22connector%22%3A%22AND%22%2C%22right%22%3A%7B%22id%22%3A%22field2%22%2C%22operator%22%3A%22operator15%22%2C%22values%22%3A%5B%7B%22value%22%3A%22test3%22%2C%22label%22%3A%22label3%22%7D%5D%7D%7D&isDefault=true", mockRequest.data);

      mockRequest.readyState = 4;
      mockRequest.status = 200;
      mockRequest.responseText = Ext.util.JSON.encode(true);
      Clock.tick(50);
      assertObjectEquals("testSavePreference risultato", true, result);
    }

    function testSavePreferenceFailure(){

      prefManager.on("preferenceSaved",onPreferenceSaved);
      prefManager.savePreference('','pluto','pluto description',true);

      mockRequest.readyState = 4;
      mockRequest.status = 500;
      mockRequest.responseText = 'Internal Server Error';
      Clock.tick(50);
      assertEquals("testSavePreferenceFailure risultato", 'Internal Server Error', result);
    }

    function testDeletePreferences(){

      prefManager.on("preferenceDeleted",onPreferenceDeleted);
      prefManager.deletePreferences(['prefId','prefId2']);

      assertEquals("POST", mockRequest.method);
      assertEquals("http://deletePrefURL", mockRequest.url);
      assertTrue(mockRequest.isAsync);
      assertTrue(mockRequest.sendCalled);
      assertEquals("testDeletePreference invio parametri", "id=prova&userName=ciccio&prefIdArray=prefId&prefIdArray=prefId2", mockRequest.data);

      mockRequest.readyState = 4;
      mockRequest.status = 200;
      mockRequest.responseText = Ext.util.JSON.encode(true);
      Clock.tick(50);
      assertObjectEquals("testDeletePreference risultato", true, result);
    }

    function testDeletePreferencesFailure(){

      prefManager.on("preferenceDeleted",onPreferenceDeleted);
      prefManager.deletePreferences(['prefId']);

      mockRequest.readyState = 4;
      mockRequest.status = 500;
      mockRequest.responseText = 'Internal Server Error';
      Clock.tick(50);
      assertEquals("testDeletePreferenceFailure risultato", 'Internal Server Error', result);
    }

    function setUp(){

      fieldManager=new Ext.ux.netbox.core.FieldManager();
      filterModel=new Ext.ux.netbox.core.FilterModel(fieldManager);
      field=new Ext.ux.netbox.core.Field("field");
      field2=new Ext.ux.netbox.core.Field("field2");
      operator=new Ext.ux.netbox.core.Operator("operator");
      operator15=new Ext.ux.netbox.core.Operator("operator15");
      field.addOperator(operator);
      field2.addOperator(operator15);
      field.setDefaultOperator(operator);
      field2.setDefaultOperator(operator15);
      fieldManager.addField(field);
      fieldManager.addField(field2);
      val1={value: "test1", label: "label1"};
      val2={value: "test2", label: "label2"};
      val3={value: "test3", label: "label3"};
      filterObject={id:"field", operator:"operator", values: [val1,val2]};
      filterObject2={id:"field2", operator:"operator15", values: [val3]};
      compositeFilterObj={left:filterObject,connector:Ext.ux.netbox.core.CompositeFilter.AND,right:filterObject2};

      prefManager=new Ext.ux.netbox.PreferenceManager({
        id: 'prova',
        userName: 'ciccio',
        getFn: provaGetFunc,
        setFn: provaSetFunc,
        fnScope: this,
        getAllPrefURL:'http://getAllPrefURL',
        applyDefaultPrefURL:'http://applyDefaultPrefURL',
        loadPrefURL:'http://loadPrefURL',
        savePrefURL:'http://savePrefURL',
        deletePrefURL:'http://deletePrefURL'
      });

      mockRequest = new MockXmlHttpRequest();
      Ext.lib.Ajax.createXhrObject = function(transactionId) { return{conn:mockRequest, tId:transactionId}; }
    }

    function tearDown(){
      result=null;
    }

    </script>
</head>

<body>
<h1>JsUnit FieldManager Tests</h1>

<p>This page contains tests for the JsUnit Framework. To see them, take a look at the source.</p>
</body>
</html>
